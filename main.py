from conf import token
import but as kbs
from aiogram import Bot, types, Dispatcher, executor
from aiogram.types import CallbackQuery, InputFile, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from tool import instr_question1_handler, instr_question2_handler, instr_question3_handler, instr_question4_handler, \
    structure_command

bot = Bot(token=token, parse_mode="HTML")
dp = Dispatcher(bot)

# @dp.message_handler()
# async def echo(message: types.Message):
#     await message.answer(text=message.text)



# @dp.message_handler(commands=["start"])
# async def start_command(message: types.Message):
#     await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç", reply_markup=kbs.menu_button)
#     await message.answer(f"—Ç–µ–∫—Å—Ç", reply_markup=kbs.menu_keyboard)


@dp.message_handler(text='–ú–µ–Ω—é')
async def process_menu_message(message: types.Message):
    if message.text.lower() == '–º–µ–Ω—é':
        await bot.send_message(message.chat.id, '–ú–µ–Ω—é:', reply_markup=kbs.menu_keyboard)


@dp.callback_query_handler(lambda x: x.data == 'history_but')
async def instr_command(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞:')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await bot.send_message(callback_query.from_user.id, '–ö–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–≤–µ–ª–æ –∫ <b>–Ω–∞—á–∞–ª—É</b> –ü–µ—Ä–≤–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω—ã?‚öî',
                           reply_markup=kbs.question1_buttons)


@dp.callback_query_handler(kbs.question1_cb.filter())
async def question1_handler(callback_query: CallbackQuery, callback_data: dict):
    answer = callback_data['answer']
    while answer != 'b':
        await callback_query.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æü§î.')
    await callback_query.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æüëç!')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    await callback_query.message.answer('–í –∫–∞–∫–æ–º –≥–æ–¥—É –ø—Ä–æ–∏–∑–æ—à–ª–∞ –†–µ–≤–æ–ª—é—Ü–∏—è –≤–æ <b>–§—Ä–∞–Ω—Ü–∏–∏</b>?',
                                        reply_markup=kbs.question2_buttons)


@dp.callback_query_handler(kbs.question2_cb.filter())
async def question2_handler(callback_query: CallbackQuery, callback_data:
dict):
    answer = callback_data['answer']
    while answer != 'a':
        await callback_query.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æü§î.')
    await callback_query.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æüëç!')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
    await callback_query.message.answer('–ö—Ç–æ –±—ã–ª <b>–ø–µ—Ä–≤—ã–º</b> –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏?',
                                        reply_markup=kbs.question3_buttons)


@dp.callback_query_handler(kbs.question3_cb.filter())
async def question3_handler(callback_query: CallbackQuery, callback_data: dict):
    answer = callback_data['answer']
    while answer != 'b':
        await callback_query.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æü§î.')
    await callback_query.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æüëç!')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å
    await callback_query.message.answer('–í –∫–∞–∫–æ–º –≥–æ–¥—É –ø—Ä–æ–∏–∑–æ—à–ª–∞ –û–∫—Ç—è–±—Ä—å—Å–∫–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è –≤ –†–æ—Å—Å–∏–∏?',
                                        reply_markup=kbs.question4_buttons)


@dp.callback_query_handler(kbs.question4_cb.filter())
async def question4_handler(callback_query: CallbackQuery, callback_data: dict):
    answer = callback_data['answer']
    while answer != 'b':
        await callback_query.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æü§î.')
    await callback_query.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æüëç!')
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
    await callback_query.message.answer('–¢–µ—Å—Ç –æ–∫–æ–Ω—á–µ–Ωüéâüéä. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!üëç')
    await bot.send_sticker(chat_id=callback_query.from_user.id,
                           sticker=r"CAACAgIAAxkBAAEI3U1kVQZGtdksjFg9CH636ma1ogc_XQACEBoAAocnIEjsWiTwN9NJuy8E")


# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

kb = ReplyKeyboardMarkup(resize_keyboard=True) #, one_time_keyboard=True

b1 = KeyboardButton('/help')
b2 = KeyboardButton('/description')
b3 = KeyboardButton('/photo')
kb.add(b1).insert(b2).insert(b3)


HELP_COMMAND = """
<b>/help</b> - <em>—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</em>
<b>/start</b> - <em>—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞</em>
<b>/description</b> - <em>–æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞</em>
<b>/photo</b> - <em>–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—à–µ–≥–æ —Ñ–æ—Ç–æ</em>
"""


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=HELP_COMMAND,
                           parse_mode="HTML") #, reply_markup=ReplyKeyboardRemove()
    await message.delete()


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç",
                           parse_mode="HTML",
                           reply_markup=kb)
    await message.delete()


@dp.message_handler(commands=['description'])
async def desc_command(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text="–ù–∞—à –±–æ—Ç —É–º–µ–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
                           parse_mode="HTML")
    await message.delete()


@dp.message_handler(commands=['photo'])
async def photo_command(message: types.Message):
    await bot.send_photo(message.from_user.id,
                         photo='https://oir.mobi/uploads/posts/2022-09/1662322342_1-oir-mobi-p-uporotaya-sova-vkontakte-1.jpg')
    await message.delete()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)


