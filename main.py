from conf import token
import but as kbs
from asyncio import new_event_loop
from aiogram import Bot, types, Dispatcher, executor
from aiogram.types import CallbackQuery, InputFile, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from aiogram.types.poll import PollAnswer

from tool import instr_question1_handler, instr_question2_handler, instr_question3_handler, instr_question4_handler, \
    structure_command
import Connection

loop = new_event_loop()

bot = Bot(token=token, parse_mode="HTML")
dp = Dispatcher(bot=bot, loop=loop)


# @dp.message_handler()
# async def echo(message: types.Message):
#     await message.answer(text=message.text)


# @dp.message_handler(commands=["start"])
# async def start_command(message: types.Message):
#     await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç", reply_markup=kbs.menu_button)
#     await message.answer(f"—Ç–µ–∫—Å—Ç", reply_markup=kbs.menu_keyboard)


@dp.message_handler(text='–ú–µ–Ω—é')
async def process_menu_message(message: types.Message):
    if message.text.lower() == '–º–µ–Ω—é':
        await bot.send_message(message.chat.id, '–ú–µ–Ω—é:', reply_markup=kbs.menu_keyboard)


@dp.callback_query_handler(lambda x: x.data == 'history_but')
async def instr_command(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞:')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await bot.send_message(callback_query.from_user.id, '–ö–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–≤–µ–ª–æ –∫ <b>–Ω–∞—á–∞–ª—É</b> –ü–µ—Ä–≤–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω—ã?‚öî',
                           reply_markup=kbs.question1_buttons)


@dp.callback_query_handler(kbs.question1_cb.filter())
async def question1_handler(callback_query: CallbackQuery, callback_data: dict):
    answer = callback_data['answer']
    while answer != 'b':
        await callback_query.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æü§î.')
    await callback_query.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æüëç!')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    await callback_query.message.answer('–í –∫–∞–∫–æ–º –≥–æ–¥—É –ø—Ä–æ–∏–∑–æ—à–ª–∞ –†–µ–≤–æ–ª—é—Ü–∏—è –≤–æ <b>–§—Ä–∞–Ω—Ü–∏–∏</b>?',
                                        reply_markup=kbs.question2_buttons)


@dp.callback_query_handler(kbs.question2_cb.filter())
async def question2_handler(callback_query: CallbackQuery, callback_data:
dict):
    answer = callback_data['answer']
    while answer != 'a':
        await callback_query.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æü§î.')
    await callback_query.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æüëç!')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
    await callback_query.message.answer('–ö—Ç–æ –±—ã–ª <b>–ø–µ—Ä–≤—ã–º</b> –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏?',
                                        reply_markup=kbs.question3_buttons)


@dp.callback_query_handler(kbs.question3_cb.filter())
async def question3_handler(callback_query: CallbackQuery, callback_data: dict):
    answer = callback_data['answer']
    while answer != 'b':
        await callback_query.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æü§î.')
    await callback_query.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æüëç!')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å
    await callback_query.message.answer('–í –∫–∞–∫–æ–º –≥–æ–¥—É –ø—Ä–æ–∏–∑–æ—à–ª–∞ –û–∫—Ç—è–±—Ä—å—Å–∫–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è –≤ –†–æ—Å—Å–∏–∏?',
                                        reply_markup=kbs.question4_buttons)


@dp.callback_query_handler(kbs.question4_cb.filter())
async def question4_handler(callback_query: CallbackQuery, callback_data: dict):
    answer = callback_data['answer']
    while answer != 'b':
        await callback_query.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æü§î.')
    await callback_query.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æüëç!')
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
    await callback_query.message.answer('–¢–µ—Å—Ç –æ–∫–æ–Ω—á–µ–Ωüéâüéä. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!üëç')
    await bot.send_sticker(chat_id=callback_query.from_user.id,
                           sticker=r"CAACAgIAAxkBAAEI3U1kVQZGtdksjFg9CH636ma1ogc_XQACEBoAAocnIEjsWiTwN9NJuy8E")


# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

kb = ReplyKeyboardMarkup(resize_keyboard=True)  # , one_time_keyboard=True

b1 = KeyboardButton('/help')
b2 = KeyboardButton('/description')
b3 = KeyboardButton('/photo')
kb.add(b1).insert(b2).insert(b3)

HELP_COMMAND = """
<b>/help</b> - <em>—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</em>
<b>/start</b> - <em>—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞</em>
<b>/description</b> - <em>–æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞</em>

<b>/menu</b> - <em>–º–µ–Ω—é –±–æ—Ç–∞</em>
<b>/groups</b> - <em>–æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞</em>

<b>/photo</b> - <em>–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—à–µ–≥–æ —Ñ–æ—Ç–æ</em>
"""


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=HELP_COMMAND,
                           parse_mode="HTML")  # , reply_markup=ReplyKeyboardRemove()
    await message.delete()


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    # await bot.send_message(chat_id=message.from_user.id,
    #                        text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç",
    #                        parse_mode="HTML",
    #                        reply_markup=kb)
    await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}', reply_markup=kbs.menu_button)
    # await message.answer(f"—Ç–µ–∫—Å—Ç", reply_markup=kbs.menu_keyboard)
    await message.delete()


@dp.message_handler(commands=['description'])
async def desc_command(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text="–ù–∞—à –±–æ—Ç —É–º–µ–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
                           parse_mode="HTML")
    await message.delete()


@dp.message_handler(commands=['photo'])
async def photo_command(message: types.Message):
    await bot.send_photo(message.from_user.id,
                         photo='https://oir.mobi/uploads/posts/2022-09/1662322342_1-oir-mobi-p-uporotaya-sova-vkontakte-1.jpg')
    await message.delete()


@dp.message_handler(commands=['groups'])
async def group_command(message: types.Message):
    connect = Connection.connect()
    cursor = connect.cursor()

    listss = []
    cursor.execute("SELECT Name FROM Groups")
    for row in cursor.fetchall():
        listss.append(str(row)[2:-3])

    cursor.close()
    connect.close()

    await bot.send_message(message.from_user.id, '–ì—Ä—É–ø–ø—ã', reply_markup=kbs.createButGroups(listss))
    await message.delete()


@dp.callback_query_handler(kbs.cb.filter(action='–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è'))
async def annotaion_command(call: CallbackQuery):
    await call.answer(cache_time=10)
    await bot.send_poll(chat_id=call.message.chat.id,
                        question='–ß—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—à–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è?',
                        options=['—Ü–µ–ª—å',
                                 '–∑–∞–¥–∞—á–∏',
                                 '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
                                 '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
                                 '–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤'],
                        is_anonymous=False,
                        allows_multiple_answers=True)


@dp.callback_query_handler(kbs.cb.filter(action='–û–±–∑–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏'))
async def reviewsubarea_command(call: CallbackQuery):
    await call.answer(cache_time=10)
    await bot.send_poll(chat_id=call.message.chat.id,
                        question='–ü—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç –ª–∏ –≤ –≤–∞—à–µ–π —Ä–∞–±–æ—Ç–µ –æ–±–∑–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏?',
                        options=['–æ–±–∑–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏?', '—Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–æ–≤?'],
                        is_anonymous=False,
                        allows_multiple_answers=True)


@dp.callback_query_handler(kbs.cb.filter(action='–û–±–∑–æ—Ä –∞–Ω–∞–ª–æ–≥–æ–≤'))
async def reviewanalog_command(call: CallbackQuery):
    await call.answer(cache_time=10)
    await bot.send_poll(chat_id=call.message.chat.id,
                        question='–°–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ –æ–±–∑–æ—Ä –∞–Ω–∞–ª–æ–≥–æ–≤?',
                        options=['–í–∫–ª—é—á–∞–µ—Ç –ª–∏ –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–æ–≥–æ–≤?',
                                 '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –ª–∏ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –∞–Ω–∞–ª–æ–≥–æ–≤?'],
                        is_anonymous=False,
                        allows_multiple_answers=True)


@dp.callback_query_handler(kbs.cb.filter(action='–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ'))
async def modelir_command(call: CallbackQuery):
    await call.answer(cache_time=10)
    await bot.send_poll(chat_id=call.message.chat.id,
                        question='–í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ?',
                        options=['–£ –≤–∞—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–∞?',
                                 '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤?'],
                        is_anonymous=False,
                        allows_multiple_answers=True)


@dp.callback_query_handler(kbs.cb.filter(action='—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ'))
async def techzad_command(call: CallbackQuery):
    await call.answer(cache_time=10)
    await bot.send_poll(chat_id=call.message.chat.id,
                        question='–£–∫–∞–∑–∞–Ω–æ –ª–∏ —É –≤–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ?',
                        options=['–°–æ–¥–µ—Ä–∂–∞—Ç—Å—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ—Å—Ç–∞–≤—É –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π?',
                                 '–ò–º–µ—é—Ç—Å—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤—Ö–æ–¥–Ω—ã–º –∏ –≤—ã—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º?',
                                 '–°–æ–¥–µ—Ä–∂–∞—Ç—Å—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É?',
                                 '–í–∫–ª—é—á–∞–µ—é—Ç—Å—è –ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏?',
                                 '–ü—Ä–æ–ø–∏—Å–∞–Ω—ã —ç—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏?'
                                 ],
                        is_anonymous=False,
                        allows_multiple_answers=True)


@dp.callback_query_handler(kbs.cb.filter(action='–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã'))
async def arhitectprogr_command(call: CallbackQuery):
    await call.answer(cache_time=10)
    await bot.send_poll(chat_id=call.message.chat.id,
                        question='–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É –≤–∞—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã?',
                        options=['–£ –≤–∞—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–∞?',
                                 '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤?'
                                 ],
                        is_anonymous=False,
                        allows_multiple_answers=True)


@dp.callback_query_handler(kbs.cb.filter(action='—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö'))
async def structuredata_command(call: CallbackQuery):
    await bot.send_poll(chat_id=call.message.chat.id,
                        question='–í–∫–ª—é—á–µ–Ω–∞ –ª–∏ –≤ —Ä–∞–±–æ—Ç—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö?',
                        options=['–£ –≤–∞—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–∞?',
                                 '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤?'
                                 ],
                        is_anonymous=False,
                        allows_multiple_answers=True)
    await call.answer(cache_time=10)


@dp.callback_query_handler(kbs.cb.filter(action='–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'))
async def polinterf_command(call: CallbackQuery):
    await call.answer(cache_time=10)
    await bot.send_poll(chat_id=call.message.chat.id,
                        question='–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É –≤–∞—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã?',
                        options=['–£ –≤–∞—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–∞?',
                                 '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤?'
                                 ],
                        is_anonymous=False,
                        allows_multiple_answers=True)


@dp.callback_query_handler(kbs.cb.filter(action='pz'))
async def pz_command(call: CallbackQuery):
    await bot.send_message(call.message.chat.id, '–ü–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞:', reply_markup=kbs.createButPz())


@dp.message_handler(text='–ú–µ–Ω—é')
async def process_menu_message(message: types.Message):
    if message.text.lower() == '–º–µ–Ω—é':
        await bot.send_message(message.chat.id, '–ú–µ–Ω—é:', reply_markup=kbs.menu_keyboard)


# @dp.callback_query_handler(kbs.cb.filter(action='pz'))
# async def pz_command(call: CallbackQuery):
#     await call.answer(cache_time=10)
#     await bot.send_poll(chat_id=call.message.chat.id,
#                         question='–ß—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—à–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è?',
#                         options=['—Ü–µ–ª—å',
#                                  '–∑–∞–¥–∞—á–∏',
#                                  '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
#                                  '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
#                                  '–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤'],
#                         is_anonymous=False,
#                         allows_multiple_answers=True)


@dp.poll_answer_handler()
async def handle_poll_answer(poll: PollAnswer):
    connect = Connection.connect()
    cursor = connect.cursor()
    interests = str(poll['option_ids'])
    user_id = poll['user']['id']

    cursor.execute("""INSERT INTO [Groups](Name) VALUES(?) """, [interests])

    cursor.close()
    connect.commit()
    connect.close()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
